See: https://www.eksworkshop.com/beginner/180_fargate/ingress/


ID=TEST2
eksctl create cluster \
            --name ${ID}-ML-APP-CLUSTER \
            --region us-east-1 \
            --fargate


kubectl run ml-app --image=017792502591.dkr.ecr.us-east-1.amazonaws.com/ml_app:latest --port=8080 -n ml-app


eksctl utils associate-iam-oidc-provider \
    --region us-east-1 \
    --cluster TEST2-ML-APP-CLUSTER \
    --approve


curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.0/docs/install/iam_policy.json
aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json --profile privado_sth
rm iam_policy.json


aws iam get-policy --policy-arn arn:aws:iam::017792502591:policy/AWSLoadBalancerControllerIAMPolicy

eksctl create iamserviceaccount \
  --cluster TEST2-ML-APP-CLUSTER \
  --namespace kube-system \
  --name aws-load-balancer-controller \
  --attach-policy-arn arn:aws:iam::017792502591:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --region us-east-1 \
  --approve


echo 'export LBC_VERSION="v2.3.0"' >>  ~/.bashrc
.  ~/.bashrc



helm repo add eks https://aws.github.io/eks-charts

export VPC_ID=$(aws eks describe-cluster \
                --name TEST2-ML-APP-CLUSTER \
                --query "cluster.resourcesVpcConfig.vpcId" \
                --output text\
                --region us-east-1)

helm upgrade -i aws-load-balancer-controller \
    eks/aws-load-balancer-controller \
    -n kube-system \
    --set clusterName=TEST2-ML-APP-CLUSTER \
    --set serviceAccount.create=false \
    --set serviceAccount.name=aws-load-balancer-controller \
    --set image.tag="${LBC_VERSION}" \
    --set region=us-east-1 \
    --set vpcId=vpc-0685c617b1c93010f


kubectl -n ml-app rollout status deployment deployment-ml-app


kubectl get service/service-ml-app \
            -n ml-app \
            |  awk {'print $1" " $2 " " $4 " " $5'} | column -t

kubectl get ingress/ingress-ml-app -n ml-app

vpc-07b3d88da2c55480a

"Tags": [
                {
                    "Key": "aws:cloudformation:logical-id",
                    "Value": "InstanceSecurityGroup"
                },
                {
                    "Key": "Name",
                    "Value": "aws-cloud9-ud-clouddevops-1dd8c50a6aa4434fbd21bd335c9597b9"
                },
                {
                    "Key": "aws:cloud9:environment",
                    "Value": "1dd8c50a6aa4434fbd21bd335c9597b9"
                },
                {
                    "Key": "aws:cloudformation:stack-id",
                    "Value": "arn:aws:cloudformation:us-east-1:017792502591:stack/aws-cloud9-ud-clouddevops-1dd8c50a6aa4434fbd21bd335c9597b9/b796bdb0-708a-11ec-864d-0ecb58536e5d"
                },
                {
                    "Key": "aws:cloud9:owner",
                    "Value": "AIDAQIJEEBM7TKQYR66I4"
                },
                {
                    "Key": "aws:cloudformation:stack-name",
                    "Value": "aws-cloud9-ud-clouddevops-1dd8c50a6aa4434fbd21bd335c9597b9"
                }
            ],

aws ec2 describe-security-groups \
 --region us-east-1 \
 --filters Name=tag:Name,Values=aws-cloud9-ud-clouddevops-1dd8c50a6aa4434fbd21bd335c9597b9 \
 --query "SecurityGroups[*].{ID:GroupId}" \
 --output text \
 --profile privado_sth

{ # try

    python &&
    #save your output

} || { # catch
    # save log for exception 
}


vpc="vpc-xxxxxxxxxxxxx" 
aws ec2 describe-internet-gateways --filters 'Name=attachment.vpc-id,Values='$vpc | grep InternetGatewayId
aws ec2 describe-subnets --filters 'Name=vpc-id,Values='$vpc | grep SubnetId
aws ec2 describe-route-tables --filters 'Name=vpc-id,Values='$vpc | grep RouteTableId
aws ec2 describe-network-acls --filters 'Name=vpc-id,Values='$vpc | grep NetworkAclId
aws ec2 describe-vpc-peering-connections --filters 'Name=requester-vpc-info.vpc-id,Values='$vpc | grep VpcPeeringConnectionId
aws ec2 describe-vpc-endpoints --filters 'Name=vpc-id,Values='$vpc | grep VpcEndpointId
aws ec2 describe-nat-gateways --filter 'Name=vpc-id,Values='$vpc | grep NatGatewayId
aws ec2 describe-security-groups --filters 'Name=vpc-id,Values='$vpc | grep GroupId
aws ec2 describe-instances --filters 'Name=vpc-id,Values='$vpc | grep InstanceId
aws ec2 describe-vpn-connections --filters 'Name=vpc-id,Values='$vpc | grep VpnConnectionId
aws ec2 describe-vpn-gateways --filters 'Name=attachment.vpc-id,Values='$vpc | grep VpnGatewayId
aws ec2 describe-network-interfaces --filters 'Name=vpc-id,Values='$vpc | grep NetworkInterfaceId


cat tmp_test.yml | sed "s/{{WORKFLOW_ID}}/${WORKFLOW_ID}/g"

aws eks update-kubeconfig --region us-east-1 --name ML-APP-CLUSTER --profile privado_sth

eksctl delete fargateprofile \
                --name fargate_profile_ml-app-657cc2f \
                --cluster ML-APP-CLUSTER --region us-east-1

EKS_CLUSTER_NAME=ML-APP-CLUSTER
AWS_REGION=us-east-1
aws eks list-fargate-profiles \
            --cluster-name ${EKS_CLUSTER_NAME} \
            --region ${AWS_REGION}

            PROFILES=($(aws eks list-fargate-profiles \
            --cluster-name ${EKS_CLUSTER_NAME} \
            --region ${AWS_REGION} \
            --output text))
            echo profile names: "${PROFILES[@]}"

            PROFILES=($(aws eks list-fargate-profiles \
            --cluster-name ${EKS_CLUSTER_NAME} \
            --region ${AWS_REGION} \
            --no-paginate \
            --output text | awk '{print $2}'))
            PROFILES=(${PROFILES[@]/fp-default})
            echo profile names: "${PROFILES[@]}"

{
    "DistributionList": {
        "Marker": "",
        "MaxItems": 100,
        "IsTruncated": false,
        "Quantity": 1,
        "Items": [
            {
                "Id": "E1XA8VRV2YZ49H",
                "ARN": "arn:aws:cloudfront::017792502591:distribution/E1XA8VRV2YZ49H",
                "Status": "Deployed",
                "LastModifiedTime": "2022-01-25T19:49:44.541000+00:00",
                "DomainName": "d22nmbtj7nca8q.cloudfront.net",
                "Aliases": {
                    "Quantity": 0
                },
                "Origins": {
                    "Quantity": 1,
                    "Items": [
                        {
                            "Id": "ml-app-api",
                            "DomainName": "k8s-mlapp3f5-ingressm-a489c71708-945884218.us-east-1.elb.amazonaws.com",
                            "OriginPath": "",
                        }
                    ]
                },

aws cloudfront list-distributions \ 
--query "DistributionList[*].Items[*].DomainName" \
--profile privado_sth

--query "DistributionList.Items[].{DomainName: DomainName, OriginDomainName: Origins.Items[0].DomainName}[?contains(OriginDomainName, 'example1.com')] | [0]"
--query "DistributionList.Items[].{DomainName: DomainName, Id: Origins.Items[0].Id}[?contains(Id, 'ml-app-api')] | [0]"

aws cloudfront list-distributions --query "DistributionList.Items[].{DomainName: DomainName, Id: Origins.Items[0].Id}[?contains(Id, 'ml-app-api')] | [0]" --output text

($(aws cloudfront list-distributions --query "DistributionList.Items[].{DomainName: DomainName, Id: Origins.Items[0].Id}[?contains(Id, 'ml-app-api')] | [0]"))[0]

fargate_profile_ml-app-ab22dfc

eksctl delete fargateprofile \
                --name fargate_profile_ml-app-ab25d08 \
                --cluster ${EKS_CLUSTER_NAME} \
                --region ${AWS_REGION}