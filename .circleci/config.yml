# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  # TODO: adapt to project
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster --name ${workflow_id}-ML-APP-CLUSTER --region us-east-1

jobs:
  build_app:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            echo "Virtual Environment created, now installing requirments..."
            make install
            # Install hadolint
            echo "Requirements installed, now installing hadolint..."
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  # ToDo
  # OPTIONAL
  # create unit test of app 
  # run app locally and send dummy request to API
  # use unit test to verify expected result
  # test_app:

  # ToDo
  # store in AWS image repository -> AWS ECR
  build_container:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # TODO install and start docker
            yum update -y
            yum install docker -y
            service docker start
      - run:
          name: build docker image
          command: |
            docker build --tag=ml-app-local .
      - run:
          name: authenticate and upload docker image to AWS ECR
          command: |
            # Create dockerpath
            # TODO: handover dockerpath variable instead of hardcording
            DOCKERPATH=017792502591.dkr.ecr.us-east-1.amazonaws.com/ml_app:latest
            # to local docker image to central path
            docker image tag ml-app-local:latest $DOCKERPATH
            # Retrieve an authentication token and authenticate your Docker client to your registry.
            aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
            # Push Docker image to AWS ECR repository
            docker push $DOCKERPATH

  # ToDo
  # optional element -> e.g. security scanning of Docker container
  # scan_container:  


# ToDo
  # create AWS Kubernetes Cluster -> AWS EKS
  # include circleci id in stack names
  create_eks_cluster:  
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # TODO install and start eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.80.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: created managed Kubernetes cluster via AWS Fargate
          command: |
            ID=${CIRCLE_WORKFLOW_ID:0:7}
            # create managed cluster on AWS Fargate
            eksctl create cluster \
            --name ${ID}-ML-APP-CLUSTER \
            --region us-east-1 \
            --fargate
            # View Kubernetes resources
            kubectl get nodes -o wide
            # View the workloads running on the cluster
            kubectl get pods --all-namespaces -o wide
            # create Fargate profile ml-app -> see https://docs.aws.amazon.com/eks/latest/userguide/fargate-profile.html
            eksctl create fargateprofile \
            --cluster ${ID}-ML-APP-CLUSTER \
            --name fargate_profile_ml-app \
            --namespace ml-app \
            --region us-east-1
            # verify that profile was created
            aws eks list-fargate-profiles \
            --cluster-name ${ID}-ML-APP-CLUSTER \
            --region us-east-1

  # ToDo
  setup_eks_loadbalancer: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: |
            # TODO install HELM -> https://www.eksworkshop.com/beginner/060_helm/helm_intro/install/index.html
      - run:
          name: install prerequisites
          command: |
            # TODO -> https://www.eksworkshop.com/beginner/180_fargate/prerequisites-for-alb/

  # ToDo
  deploy_container: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create namespace
          command: |
            kubectl create namespace ml-app
      - run:
          name: deploy container to Fargate cluster
          command: |
            kubectl apply -f fargate_deployment.yaml
            # list all resources in namespace
            kubectl get all -n ml-app
      # - run:
      #     name: create service
      #     command: |
      #       kubectl apply -f fargate_service.yaml
      #       # describe details of service
      #       kubectl -n ml-app describe service ml-app-service
      #       # view details of pod ml-app-deployment-6c76c467-c5pbd
      #       kubectl -n ml-app describe pod ml-app-deployment-6c76c467-c5pbd
      # - run:
      #     name: expose deployment of type LoadBalancer
      #     command: |
      #       # kubectl expose deployment ml-app-deployment \
      #       # --type=LoadBalancer \
      #       # --name=ml-app-loadbalancer \
      #       # -n ml-app
      #       kubectl expose deployment ml-app-deployment \
      #       --type=NodePort  \
      #       --name=ml-app-service-exposed\
      #       -n ml-app
      #       # get information about service
      #       kubectl get service/ml-app-loadbalancer \
      #       -n ml-app \
      #       |  awk {'print $1" " $2 " " $4 " " $5'} | column -t
      #       # list services
      #       kubectl get svc -n ml-app


  # ToDo
  # create AWS Kubernetes Cluster -> AWS EKS
  # include circleci id in stack names
  # create_network_infrastructure:  
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: create VPCs, IAM role and EKS Cluster
  #         command: |
  #           ID=${CIRCLE_WORKFLOW_ID:0:7}
  #           aws cloudformation deploy \
  #             --template-file infrastructure/eks-vpc-role-cluster.yaml \
  #             --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"\
  #             --tags project=ml-app \
  #             --stack-name "ml-app-eks-cluster-${ID}" \
  #             --parameter-overrides \
  #             ID="${ID}" \
  #             EKSClusterName="${ID}-ML-APP-CLUSTER" 

  # create_eks_cluster:  
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: create worker node group for EKS Cluster
  #         command: |
  #           ID=${CIRCLE_WORKFLOW_ID:0:7}
  #           aws cloudformation deploy \
  #             --template-file infrastructure/eks-nodegroup.yaml \
  #             --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"\
  #             --tags project=ml-app \
  #             --stack-name "ml-app-eks-worker-${ID}" \
  #             --parameter-overrides \
  #             ID="${ID}" \
  #             KeyName="EKSworkerKeyPair" \
  #             ClusterName="${ID}-ML-APP-CLUSTER" \
  #             NodeGroupName="${ID}-ML-APP-NODEGROUP"

  # ToDo
  # deploy_container: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # TODO install and start docker
  #           yum update -y
  #           yum install docker -y
  #           service docker start
  #     - run: 
  #         name: create kubeconfig for EKS
  #         command: |
  #           ID=${CIRCLE_WORKFLOW_ID:0:7}
  #           aws eks list-clusters
  #           aws eks update-kubeconfig --region us-east-1 --name "${ID}-ML-APP-CLUSTER"
  #           aws get svc
  #     - run: 
  #         name: deploy container to EKS Cluster
  #         command: |
  #           kubectl apply -f eks_deployment.yaml
  #           kubectl get deployments

  # ToDo
  # smoketest_app:  

  # ToDo
  # use cloudfront for production container
  # prod_promotion:  

  # ToDo
  # delete no longer required resources
  # cleanup:  

workflows:
  default:
    jobs:
      - build_app
      # - test_app # optional
      # - build_container
      #     requires: [build_app]
      # - scan_container # optional

      # TODO: complete steps
      # - create_eks_cluster
      #     requires: [build_app]
      #     filters:
      #       branches:
      #         only: [master]
      # - create_eks_cluster
      # - setup_eks_loadbalancer
      #     requires: [create_eks_cluster]
      # - deploy_container
      #     requires: [setup_eks_loadbalancer]
      # - smoketest_app
      #     requires: [deploy_container]
      # - prod_promotion
      #     requires: [smoketest_app]
      # - cleanup
      #     requires: [prod_promotion]
