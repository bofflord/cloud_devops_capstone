# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

commands:
  # TODO: adapt to project
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb --force s3://udapeople-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>  


jobs:
  build_app:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            echo "Virtual Environment created, now installing requirments..."
            make install
            # Install hadolint
            echo "Requirements installed, now installing hadolint..."
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  # ToDo
  # OPTIONAL
  # create unit test of app 
  # run app locally and send dummy request to API
  # use unit test to verify expected result
  # test_app:

  # ToDo
  # store in AWS image repository -> AWS ECR
  build_container:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # TODO install and start docker
            yum update -y
            yum install docker -y
            service docker start
      - run:
          name: build docker image
          command: |
            docker build --tag=ml-app-local .
      - run:
          name: authenticate and upload docker image to AWS ECR
          command: |
            # Create dockerpath
            # TODO: handover dockerpath variable instead of hardcording
            DOCKERPATH=017792502591.dkr.ecr.us-east-1.amazonaws.com/ml_app:latest
            # to local docker image to central path
            docker image tag ml-app-local:latest $DOCKERPATH
            # Retrieve an authentication token and authenticate your Docker client to your registry.
            aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
            # Push Docker image to AWS ECR repository
            docker push $DOCKERPATH

  # ToDo
  # optional element -> e.g. security scanning of Docker container
  # scan_container:  

  # ToDo
  # create AWS Kubernetes Cluster -> AWS EKS
  # include circleci id in stack names
  create_network_infrastructure:  
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create VPCs for EKS Cluster
          command: |
            aws cloudformation deploy \
              --template-file infrastructure/eks-vpc-role-cluster.yaml \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"\
              --tags project=ml-app \
              --stack-name "ml-app-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

  create_eks_cluster:  
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name:
          command: |
            aws cloudformation deploy \
              --template-file infrastructure/eks-nodegroup.yaml \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"\
              --tags project=ml-app \
              --stack-name "ml-app-eks-worker-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

  # ToDo
  # deploy_container: 

  # ToDo
  # smoketest_app:  

  # ToDo
  # use cloudfront for production container
  # prod_promotion:  

  # ToDo
  # delete no longer required resources
  # cleanup:  

workflows:
  default:
    jobs:
      - build_app
      # - test_app # optional
      - build_container
          requires: [build_app]
      # - scan_container # optional
      - create_network_infrastructure
          requires: [build_container] 
          filters:
            branches:
              only: [master]
      - create_eks_cluster
          requires: [create_network_infrastructure]
      - deploy_container
          requires: [create_eks_cluster]
      - smoketest_app
          requires: [deploy_container]
      - prod_promotion
          requires: [smoketest_app]
      - cleanup
          requires: [prod_promotion]
